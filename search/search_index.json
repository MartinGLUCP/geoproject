{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to geoproject","text":"<p>A python package for interactive mapping and more.</p> <ul> <li>Free software: MIT license</li> <li>Documentation: https://MartinGLUCP.github.io/geoproject</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/MartinGLUCP/geoproject/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>GeoProject could always use more documentation, whether as part of the official GeoProject docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/MartinGLUCP/geoproject/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up geoproject for local development.</p> <ol> <li> <p>Fork the geoproject repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/geoproject.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv geoproject\n$ cd geoproject/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 geoproject tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and     for PyPy. Check https://github.com/MartinGLUCP/geoproject/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"foliumap/","title":"foliumap module","text":""},{"location":"foliumap/#geoproject.foliumap.Map","title":"<code> Map            (Map)         </code>","text":"<p>Create a folium map object.</p> <p>Parameters:</p> Name Type Description Default <code>folium</code> <code>_type_</code> <p>description</p> required Source code in <code>geoproject/foliumap.py</code> <pre><code>class Map(folium.Map):\n\n\"\"\"Create a folium map object.\n\n    Args:\n        folium (_type_): _description_\n    \"\"\"    \n    def __init__(self, center=[48,2], zoom=2, **kwargs) -&gt; None:\n\"\"\"Initializes the map object.\n\n        Args:\n            center (list, optional): The map center. Defaults to [20, 0].\n            zoom (int, optional): The zoom level. Defaults to 2.\n        \"\"\"\n        super().__init__(location=center, zoom_start=zoom, **kwargs)\n\n\n    def add_tile_layer(self, url, name, attribution=\"\", **kwargs):\n\"\"\"Adds a tile layer to the map.\n\n        Args:\n            url (str): The URL of the tile layer.\n            name (str): The name of the tile layer.\n            attribution (str, optional): The attribution of the tile layer. Defaults to \"\".\n        \"\"\"\n        tile_layer = folium.TileLayer(\n            tiles=url,\n            name=name,\n            attr=attribution,\n            **kwargs\n        )\n        self.add_child(tile_layer)\n</code></pre>"},{"location":"foliumap/#geoproject.foliumap.Map.__init__","title":"<code>__init__(self, center=[48, 2], zoom=2, **kwargs)</code>  <code>special</code>","text":"<p>Initializes the map object.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>The map center. Defaults to [20, 0].</p> <code>[48, 2]</code> <code>zoom</code> <code>int</code> <p>The zoom level. Defaults to 2.</p> <code>2</code> Source code in <code>geoproject/foliumap.py</code> <pre><code>def __init__(self, center=[48,2], zoom=2, **kwargs) -&gt; None:\n\"\"\"Initializes the map object.\n\n    Args:\n        center (list, optional): The map center. Defaults to [20, 0].\n        zoom (int, optional): The zoom level. Defaults to 2.\n    \"\"\"\n    super().__init__(location=center, zoom_start=zoom, **kwargs)\n</code></pre>"},{"location":"foliumap/#geoproject.foliumap.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, attribution='', **kwargs)</code>","text":"<p>Adds a tile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the tile layer.</p> required <code>name</code> <code>str</code> <p>The name of the tile layer.</p> required <code>attribution</code> <code>str</code> <p>The attribution of the tile layer. Defaults to \"\".</p> <code>''</code> Source code in <code>geoproject/foliumap.py</code> <pre><code>def add_tile_layer(self, url, name, attribution=\"\", **kwargs):\n\"\"\"Adds a tile layer to the map.\n\n    Args:\n        url (str): The URL of the tile layer.\n        name (str): The name of the tile layer.\n        attribution (str, optional): The attribution of the tile layer. Defaults to \"\".\n    \"\"\"\n    tile_layer = folium.TileLayer(\n        tiles=url,\n        name=name,\n        attr=attribution,\n        **kwargs\n    )\n    self.add_child(tile_layer)\n</code></pre>"},{"location":"geoproject/","title":"geoproject module","text":"<p>Main module. Reimplemented ipyleaflet, to familiarize myself with module creation. Works with notebook, otherwise use Foliumap for webapp.</p>"},{"location":"geoproject/#geoproject.geoproject.Map","title":"<code> Map            (Map)         </code>","text":"Source code in <code>geoproject/geoproject.py</code> <pre><code>class Map(ipyleaflet.Map):\n\n    def __init__(self, center=[48,2], zoom=2, **kwargs) -&gt; None:\n        if \"scroll_wheel_zoom\" not in kwargs:\n            kwargs[\"scroll_wheel_zoom\"] = True\n\n        super().__init__(center=center, zoom=zoom, **kwargs)\n\n        if \"layers_control\" not in kwargs:\n            kwargs[\"layers_control\"] = True\n\n        if kwargs[\"layers_control\"]:\n            self.add_layers_control()\n\n        if \"fullscreen_control\" not in kwargs:\n            kwargs[\"fullscreen_control\"] = True\n\n        if kwargs[\"fullscreen_control\"]:\n            self.add_fullscreen_control()\n\n        if \"height\" in kwargs:\n            self.layout.height = kwargs[\"height\"]\n        else:\n            self.layout.height = \"600px\"\n\n    def add_search_control(self, position=\"topleft\", **kwargs):\n\"\"\"Adds a search control to the map.\n\n        Args:\n            kwargs: Keyword arguments to pass to the search control.\n        \"\"\"\n        if \"url\" not in kwargs:\n            kwargs[\"url\"] = 'https://nominatim.openstreetmap.org/search?format=json&amp;q={s}'\n\n\n        search_control = ipyleaflet.SearchControl(position=position, **kwargs)\n        self.add_control(search_control)\n\n    def add_draw_control(self, **kwargs):\n\"\"\"Adds a draw control to the map.\n\n        Args:\n            kwargs: Keyword arguments to pass to the draw control.\n        \"\"\"\n        draw_control = ipyleaflet.DrawControl(**kwargs)\n\n        draw_control.polyline =  {\n            \"shapeOptions\": {\n                \"color\": \"#6bc2e5\",\n                \"weight\": 8,\n                \"opacity\": 1.0\n            }\n        }\n        draw_control.polygon = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#6be5c3\",\n                \"color\": \"#6be5c3\",\n                \"fillOpacity\": 1.0\n            },\n            \"drawError\": {\n                \"color\": \"#dd253b\",\n                \"message\": \"Oups!\"\n            },\n            \"allowIntersection\": False\n        }\n        draw_control.circle = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#efed69\",\n                \"color\": \"#efed69\",\n                \"fillOpacity\": 1.0\n            }\n        }\n        draw_control.rectangle = {\n            \"shapeOptions\": {\n                \"fillColor\": \"#fca45d\",\n                \"color\": \"#fca45d\",\n                \"fillOpacity\": 1.0\n            }\n        }\n\n        self.add_control(draw_control)\n\n    def add_layers_control(self, position='topright'):\n\"\"\"Adds a layers control to the map.\n\n        Args:\n            kwargs: Keyword arguments to pass to the layers control.\n        \"\"\"\n        layers_control = ipyleaflet.LayersControl(position=position)\n        self.add_control(layers_control)\n\n    def add_fullscreen_control(self, position=\"topleft\"):\n\"\"\"Adds a fullscreen control to the map.\n\n        Args:\n            kwargs: Keyword arguments to pass to the fullscreen control.\n        \"\"\"\n        fullscreen_control = ipyleaflet.FullScreenControl(position=position)\n        self.add_control(fullscreen_control)\n\n    def add_tile_layer(self, url, name, attribution=\"\", **kwargs):\n\"\"\"Adds a tile layer to the map.\n\n        Args:\n            url (str): The URL of the tile layer.\n            name (str): The name of the tile layer.\n            attribution (str, optional): The attribution of the tile layer. Defaults to \"\".\n        \"\"\"\n        tile_layer = ipyleaflet.TileLayer(\n            url=url,\n            name=name,\n            attribution=attribution,\n            **kwargs\n        )\n        self.add_layer(tile_layer)\n\n    def add_basemap(self, basemap, **kwargs):\n\n        import xyzservices.providers as xyz\n\n        if basemap.lower() == \"roadmap\":\n            url = 'http://mt0.google.com/vt/lyrs=m&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n            self.add_tile_layer(url, name=basemap, **kwargs)\n        elif basemap.lower() == \"satellite\":\n            url = 'http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\n            self.add_tile_layer(url, name=basemap, **kwargs)\n        else:\n            try:\n                basemap = eval(f\"xyz.{basemap}\")\n                url = basemap.build_url()\n                attribution = basemap.attribution\n                self.add_tile_layer(url, name=basemap.name, attribution=attribution, **kwargs)\n            except:\n                raise ValueError(f\"Basemap '{basemap}' not found.\")\n\n    def add_geojson(self, data, name='GeoJSON', **kwargs):\n\"\"\"Adds a GeoJSON layer to the map.\n\n        Args:\n            data (dict): The GeoJSON data.\n        \"\"\"\n\n        if isinstance(data, str):\n            import json\n            with open(data, \"r\") as f:\n                data = json.load(f)\n\n        geojson = ipyleaflet.GeoJSON(data=data,name=name, **kwargs)\n        self.add_layer(geojson)\n\n    def add_shp(self, data, name='Shapefile', **kwargs):\n\"\"\"Adds a Shapefile layer to the map.\n\n        Args:\n            data (str): The path to the Shapefile.\n        \"\"\"\n        import geopandas as gpd\n        gdf = gpd.read_file(data)\n        geojson = gdf.__geo_interface__\n        self.add_geojson(geojson, name=name, **kwargs)\n\n    def add_geojson(self, data, **kwargs):\n\"\"\"Adds a GeoJSON layer to the map.\n\n        Args:\n            data (dict): The GeoJSON data.\n            kwargs: Keyword arguments to pass to the GeoJSON layer.\n        \"\"\"\n        import json\n\n        if isinstance(data, str):\n            with open(data, \"r\") as f:\n                data = json.load(f)\n\n        geojson = ipyleaflet.GeoJSON(data=data, **kwargs)\n        self.add_layer(geojson)\n\n    def add_raster(self, url, name='Raster', fit_bounds=True, **kwargs):\n\"\"\"Adds a raster layer to the map.\n\n        Args:\n            url (str): The URL of the raster layer.\n            name (str, optional): The name of the raster layer. Defaults to 'Raster'.\n            fit_bounds (bool, optional): Whether to fit the map bounds to the raster layer. Defaults to True.\n        \"\"\"\n        import httpx\n\n        titiler_endpoint = \"https://titiler.xyz\"\n\n        r = httpx.get(\n            f\"{titiler_endpoint}/cog/info\",\n            params = {\n                \"url\": url,\n            }\n        ).json()\n\n        bounds = r[\"bounds\"]\n\n        r = httpx.get(\n            f\"{titiler_endpoint}/cog/tilejson.json\",\n            params = {\n                \"url\": url,\n            }\n        ).json()\n\n        tile = r[\"tiles\"][0]\n\n        self.add_tile_layer(url=tile, name=name, **kwargs)\n\n        if fit_bounds:\n            bbox = [[bounds[1], bounds[0]], [bounds[3], bounds[2]]]\n            self.fit_bounds(bbox)\n\n    def add_toolbar(self, position=\"topright\"):\n\n        widget_width = \"250px\"\n        padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\n        toolbar_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Toolbar\",\n            icon=\"wrench\",\n            layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n        )\n\n        close_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Close the tool\",\n            icon=\"times\",\n            button_style=\"primary\",\n            layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n        )\n\n        toolbar = widgets.HBox([toolbar_button])\n\n        def toolbar_click(change):\n            if change[\"new\"]:\n                toolbar.children = [toolbar_button, close_button]\n            else:\n                toolbar.children = [toolbar_button]\n\n        toolbar_button.observe(toolbar_click, \"value\")\n\n        def close_click(change):\n            if change[\"new\"]:\n                toolbar_button.close()\n                close_button.close()\n                toolbar.close()\n\n        close_button.observe(close_click, \"value\")\n\n        rows = 2\n        cols = 2\n        grid = widgets.GridspecLayout(rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\"))\n\n        icons = [\"folder-open\", \"map\", \"bluetooth\", \"area-chart\"]\n\n        for i in range(rows):\n            for j in range(cols):\n                grid[i, j] = widgets.Button(description=\"\", button_style=\"primary\", icon=icons[i*rows+j], \n                                            layout=widgets.Layout(width=\"28px\", padding=\"0px\"))\n\n        toolbar = widgets.VBox([toolbar_button])\n\n        def toolbar_click(change):\n            if change[\"new\"]:\n                toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n            else:\n                toolbar.children = [toolbar_button]\n\n        toolbar_button.observe(toolbar_click, \"value\")\n\n        toolbar_ctrl = ipyleaflet.WidgetControl(widget=toolbar, position=position)\n\n        self.add_control(toolbar_ctrl)\n</code></pre>"},{"location":"geoproject/#geoproject.geoproject.Map.add_draw_control","title":"<code>add_draw_control(self, **kwargs)</code>","text":"<p>Adds a draw control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>Keyword arguments to pass to the draw control.</p> <code>{}</code> Source code in <code>geoproject/geoproject.py</code> <pre><code>def add_draw_control(self, **kwargs):\n\"\"\"Adds a draw control to the map.\n\n    Args:\n        kwargs: Keyword arguments to pass to the draw control.\n    \"\"\"\n    draw_control = ipyleaflet.DrawControl(**kwargs)\n\n    draw_control.polyline =  {\n        \"shapeOptions\": {\n            \"color\": \"#6bc2e5\",\n            \"weight\": 8,\n            \"opacity\": 1.0\n        }\n    }\n    draw_control.polygon = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#6be5c3\",\n            \"color\": \"#6be5c3\",\n            \"fillOpacity\": 1.0\n        },\n        \"drawError\": {\n            \"color\": \"#dd253b\",\n            \"message\": \"Oups!\"\n        },\n        \"allowIntersection\": False\n    }\n    draw_control.circle = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#efed69\",\n            \"color\": \"#efed69\",\n            \"fillOpacity\": 1.0\n        }\n    }\n    draw_control.rectangle = {\n        \"shapeOptions\": {\n            \"fillColor\": \"#fca45d\",\n            \"color\": \"#fca45d\",\n            \"fillOpacity\": 1.0\n        }\n    }\n\n    self.add_control(draw_control)\n</code></pre>"},{"location":"geoproject/#geoproject.geoproject.Map.add_fullscreen_control","title":"<code>add_fullscreen_control(self, position='topleft')</code>","text":"<p>Adds a fullscreen control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>Keyword arguments to pass to the fullscreen control.</p> required Source code in <code>geoproject/geoproject.py</code> <pre><code>def add_fullscreen_control(self, position=\"topleft\"):\n\"\"\"Adds a fullscreen control to the map.\n\n    Args:\n        kwargs: Keyword arguments to pass to the fullscreen control.\n    \"\"\"\n    fullscreen_control = ipyleaflet.FullScreenControl(position=position)\n    self.add_control(fullscreen_control)\n</code></pre>"},{"location":"geoproject/#geoproject.geoproject.Map.add_geojson","title":"<code>add_geojson(self, data, **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>The GeoJSON data.</p> required <code>kwargs</code> <p>Keyword arguments to pass to the GeoJSON layer.</p> <code>{}</code> Source code in <code>geoproject/geoproject.py</code> <pre><code>def add_geojson(self, data, **kwargs):\n\"\"\"Adds a GeoJSON layer to the map.\n\n    Args:\n        data (dict): The GeoJSON data.\n        kwargs: Keyword arguments to pass to the GeoJSON layer.\n    \"\"\"\n    import json\n\n    if isinstance(data, str):\n        with open(data, \"r\") as f:\n            data = json.load(f)\n\n    geojson = ipyleaflet.GeoJSON(data=data, **kwargs)\n    self.add_layer(geojson)\n</code></pre>"},{"location":"geoproject/#geoproject.geoproject.Map.add_layers_control","title":"<code>add_layers_control(self, position='topright')</code>","text":"<p>Adds a layers control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>Keyword arguments to pass to the layers control.</p> required Source code in <code>geoproject/geoproject.py</code> <pre><code>def add_layers_control(self, position='topright'):\n\"\"\"Adds a layers control to the map.\n\n    Args:\n        kwargs: Keyword arguments to pass to the layers control.\n    \"\"\"\n    layers_control = ipyleaflet.LayersControl(position=position)\n    self.add_control(layers_control)\n</code></pre>"},{"location":"geoproject/#geoproject.geoproject.Map.add_raster","title":"<code>add_raster(self, url, name='Raster', fit_bounds=True, **kwargs)</code>","text":"<p>Adds a raster layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the raster layer.</p> required <code>name</code> <code>str</code> <p>The name of the raster layer. Defaults to 'Raster'.</p> <code>'Raster'</code> <code>fit_bounds</code> <code>bool</code> <p>Whether to fit the map bounds to the raster layer. Defaults to True.</p> <code>True</code> Source code in <code>geoproject/geoproject.py</code> <pre><code>def add_raster(self, url, name='Raster', fit_bounds=True, **kwargs):\n\"\"\"Adds a raster layer to the map.\n\n    Args:\n        url (str): The URL of the raster layer.\n        name (str, optional): The name of the raster layer. Defaults to 'Raster'.\n        fit_bounds (bool, optional): Whether to fit the map bounds to the raster layer. Defaults to True.\n    \"\"\"\n    import httpx\n\n    titiler_endpoint = \"https://titiler.xyz\"\n\n    r = httpx.get(\n        f\"{titiler_endpoint}/cog/info\",\n        params = {\n            \"url\": url,\n        }\n    ).json()\n\n    bounds = r[\"bounds\"]\n\n    r = httpx.get(\n        f\"{titiler_endpoint}/cog/tilejson.json\",\n        params = {\n            \"url\": url,\n        }\n    ).json()\n\n    tile = r[\"tiles\"][0]\n\n    self.add_tile_layer(url=tile, name=name, **kwargs)\n\n    if fit_bounds:\n        bbox = [[bounds[1], bounds[0]], [bounds[3], bounds[2]]]\n        self.fit_bounds(bbox)\n</code></pre>"},{"location":"geoproject/#geoproject.geoproject.Map.add_search_control","title":"<code>add_search_control(self, position='topleft', **kwargs)</code>","text":"<p>Adds a search control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>kwargs</code> <p>Keyword arguments to pass to the search control.</p> <code>{}</code> Source code in <code>geoproject/geoproject.py</code> <pre><code>def add_search_control(self, position=\"topleft\", **kwargs):\n\"\"\"Adds a search control to the map.\n\n    Args:\n        kwargs: Keyword arguments to pass to the search control.\n    \"\"\"\n    if \"url\" not in kwargs:\n        kwargs[\"url\"] = 'https://nominatim.openstreetmap.org/search?format=json&amp;q={s}'\n\n\n    search_control = ipyleaflet.SearchControl(position=position, **kwargs)\n    self.add_control(search_control)\n</code></pre>"},{"location":"geoproject/#geoproject.geoproject.Map.add_shp","title":"<code>add_shp(self, data, name='Shapefile', **kwargs)</code>","text":"<p>Adds a Shapefile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The path to the Shapefile.</p> required Source code in <code>geoproject/geoproject.py</code> <pre><code>def add_shp(self, data, name='Shapefile', **kwargs):\n\"\"\"Adds a Shapefile layer to the map.\n\n    Args:\n        data (str): The path to the Shapefile.\n    \"\"\"\n    import geopandas as gpd\n    gdf = gpd.read_file(data)\n    geojson = gdf.__geo_interface__\n    self.add_geojson(geojson, name=name, **kwargs)\n</code></pre>"},{"location":"geoproject/#geoproject.geoproject.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, attribution='', **kwargs)</code>","text":"<p>Adds a tile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the tile layer.</p> required <code>name</code> <code>str</code> <p>The name of the tile layer.</p> required <code>attribution</code> <code>str</code> <p>The attribution of the tile layer. Defaults to \"\".</p> <code>''</code> Source code in <code>geoproject/geoproject.py</code> <pre><code>def add_tile_layer(self, url, name, attribution=\"\", **kwargs):\n\"\"\"Adds a tile layer to the map.\n\n    Args:\n        url (str): The URL of the tile layer.\n        name (str): The name of the tile layer.\n        attribution (str, optional): The attribution of the tile layer. Defaults to \"\".\n    \"\"\"\n    tile_layer = ipyleaflet.TileLayer(\n        url=url,\n        name=name,\n        attribution=attribution,\n        **kwargs\n    )\n    self.add_layer(tile_layer)\n</code></pre>"},{"location":"geoproject/#geoproject.geoproject.generate_lucky_number","title":"<code>generate_lucky_number(length=1)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>length</code> <code>int</code> <p>description. Defaults to 1.</p> <code>1</code> <p>Returns:</p> Type Description <code>_type_</code> <p>description</p> Source code in <code>geoproject/geoproject.py</code> <pre><code>def generate_lucky_number(length=1):\n\"\"\"_summary_\n\n    Args:\n        length (int, optional): _description_. Defaults to 1.\n\n    Returns:\n        _type_: _description_\n    \"\"\"\n    random_string = ''.join(random.choice(string.digits) for _ in range(length))\n    return int(random_string)\n</code></pre>"},{"location":"geoproject/#geoproject.geoproject.generate_random_string","title":"<code>generate_random_string(length)</code>","text":"<p>Generate random string</p> Source code in <code>geoproject/geoproject.py</code> <pre><code>def generate_random_string(length):\n\"\"\"Generate random string\"\"\"\n    characters = string.ascii_letters + string.digits  # Includes both uppercase and lowercase letters, and digits\n    random_string = ''.join(random.choice(characters) for _ in range(length))\n    return random_string\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install GeoProject, run this command in your terminal:</p> <pre><code>pip install geoproject\n</code></pre> <p>This is the preferred method to install GeoProject, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install GeoProject from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/MartinGLUCP/geoproject\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use GeoProject in a project:</p> <pre><code>import geoproject\n</code></pre>"},{"location":"examples/folium/","title":"Folium","text":"In\u00a0[1]: Copied! <pre>import geoproject.foliumap as geosdemo\n</pre> import geoproject.foliumap as geosdemo In\u00a0[2]: Copied! <pre>m = geosdemo.Map(center=(40.7128, -74.0060), zoom=12)\nurl = 'http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}'\nm.add_tile_layer(url=url, name=\"Satellite\", attribution=\"Google\")\n</pre> m = geosdemo.Map(center=(40.7128, -74.0060), zoom=12) url = 'http://mt0.google.com/vt/lyrs=y&amp;hl=en&amp;x={x}&amp;y={y}&amp;z={z}' m.add_tile_layer(url=url, name=\"Satellite\", attribution=\"Google\") In\u00a0[3]: Copied! <pre>m\n</pre> m Out[3]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/geoproject/","title":"Geoproject","text":"In\u00a0[1]: Copied! <pre>import geoproject\n</pre> import geoproject In\u00a0[2]: Copied! <pre>m = geoproject.Map(center=[48,2],zoom=5)\nm.add_search_control()\n#m.add_draw_control()\n#m.add_layers_control()\n#m.add_tile_layer(url = \"https://mt1.google.com/vt/lyrs=y&amp;x={x}&amp;y={y}&amp;z={z}\",name=\"HYBRID\")\nm.add_basemap(\"roadmap\")\nm.add_basemap(\"satellite\")\nm.add_basemap(\"Esri.WorldImagery\")\nm.add_geojson('data/sample.geojson')\nm.add_shp('data/countries.zip')\nm\n</pre> m = geoproject.Map(center=[48,2],zoom=5) m.add_search_control() #m.add_draw_control() #m.add_layers_control() #m.add_tile_layer(url = \"https://mt1.google.com/vt/lyrs=y&amp;x={x}&amp;y={y}&amp;z={z}\",name=\"HYBRID\") m.add_basemap(\"roadmap\") m.add_basemap(\"satellite\") m.add_basemap(\"Esri.WorldImagery\") m.add_geojson('data/sample.geojson') m.add_shp('data/countries.zip') m"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>import geoproject\n</pre> import geoproject  In\u00a0[2]: Copied! <pre>geoproject.generate_random_string(10)  # Generates a random string of length 10\ngeoproject.generate_lucky_number(1)\n</pre>  geoproject.generate_random_string(10)  # Generates a random string of length 10 geoproject.generate_lucky_number(1) Out[2]: <pre>8</pre>"},{"location":"examples/ipyleaflet/","title":"Ipyleaflet","text":"In\u00a0[1]: Copied! <pre>from ipyleaflet import Map, basemaps, basemap_to_tiles\n</pre> from ipyleaflet import Map, basemaps, basemap_to_tiles In\u00a0[2]: Copied! <pre>m = Map(\n    basemap=basemap_to_tiles(basemaps.NASAGIBS.ModisTerraTrueColorCR, \"2017-04-08\"),\n    center=(52.204793, 360.121558),\n    zoom=4\n)\n</pre> m = Map(     basemap=basemap_to_tiles(basemaps.NASAGIBS.ModisTerraTrueColorCR, \"2017-04-08\"),     center=(52.204793, 360.121558),     zoom=4 ) In\u00a0[3]: Copied! <pre>m\n</pre> m In\u00a0[4]: Copied! <pre>m.clear_layers()\n</pre> m.clear_layers()"},{"location":"examples/ipywidgets/","title":"Ipywidgets","text":"<p>Introduction to ipywidgets</p> <p>https://ipywidgets.readthedocs.io</p> In\u00a0[1]: Copied! <pre># !pip install geoproject\n</pre> # !pip install geoproject In\u00a0[2]: Copied! <pre>import geoproject\n</pre> import geoproject In\u00a0[3]: Copied! <pre>m = geoproject.Map()\nm\n</pre> m = geoproject.Map() m In\u00a0[4]: Copied! <pre>url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\"\nm.add_raster(url, name='Raster', fit_bounds=True)\n</pre> url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\" m.add_raster(url, name='Raster', fit_bounds=True) In\u00a0[5]: Copied! <pre>m.layers\n</pre> m.layers Out[5]: <pre>(TileLayer(attribution='&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors', base=True, max_zoom=19, min_zoom=1, name='OpenStreetMap.Mapnik', options=['attribution', 'bounds', 'detect_retina', 'max_native_zoom', 'max_zoom', 'min_native_zoom', 'min_zoom', 'no_wrap', 'tile_size', 'tms', 'zoom_offset'], url='https://tile.openstreetmap.org/{z}/{x}/{y}.png'),\n TileLayer(attribution='', name='Raster', options=['attribution', 'bounds', 'detect_retina', 'max_native_zoom', 'max_zoom', 'min_native_zoom', 'min_zoom', 'no_wrap', 'tile_size', 'tms', 'zoom_offset'], url='https://titiler.xyz/cog/tiles/WebMercatorQuad/{z}/{x}/{y}@1x?url=https%3A%2F%2Fopendata.digitalglobe.com%2Fevents%2Fmauritius-oil-spill%2Fpost-event%2F2020-08-12%2F105001001F1B5B00%2F105001001F1B5B00.tif'))</pre> In\u00a0[6]: Copied! <pre>raster_layer = m.layers[-1]\nraster_layer.interact(opacity=(0, 1, 0.1))\n</pre> raster_layer = m.layers[-1] raster_layer.interact(opacity=(0, 1, 0.1)) In\u00a0[7]: Copied! <pre>import ipywidgets as widgets\n</pre> import ipywidgets as widgets In\u00a0[8]: Copied! <pre>int_slider = widgets.IntSlider(\n    value=2000,\n    min=1984,\n    max=2020,\n    step=1,\n    description='Year:'\n)\nint_slider\n</pre> int_slider = widgets.IntSlider(     value=2000,     min=1984,     max=2020,     step=1,     description='Year:' ) int_slider In\u00a0[9]: Copied! <pre>int_slider.value\n</pre> int_slider.value Out[9]: <pre>2000</pre> In\u00a0[10]: Copied! <pre>float_slider = widgets.FloatSlider(\n    value=0,\n    min=-1,\n    max=1,\n    step=0.05,\n    description='Threshold:'\n)\nfloat_slider\n</pre> float_slider = widgets.FloatSlider(     value=0,     min=-1,     max=1,     step=0.05,     description='Threshold:' ) float_slider In\u00a0[11]: Copied! <pre>float_slider.value\n</pre> float_slider.value Out[11]: <pre>0.0</pre> In\u00a0[12]: Copied! <pre>int_progress = widgets.IntProgress(\n    value=7,\n    min=0,\n    max=10,\n    step=1,\n    description='Loading:',\n    bar_style='', # 'success', 'info', 'warning', 'danger' or ''\n    orientation='horizontal'\n)\nint_progress\n</pre> int_progress = widgets.IntProgress(     value=7,     min=0,     max=10,     step=1,     description='Loading:',     bar_style='', # 'success', 'info', 'warning', 'danger' or ''     orientation='horizontal' ) int_progress In\u00a0[13]: Copied! <pre>int_text = widgets.IntText(\n    value=7,\n    description='Any:',\n)\nint_text\n</pre> int_text = widgets.IntText(     value=7,     description='Any:', ) int_text In\u00a0[14]: Copied! <pre>float_text = widgets.FloatText(\n    value=7.5,\n    description='Any:',\n)\nfloat_text\n</pre> float_text = widgets.FloatText(     value=7.5,     description='Any:', ) float_text In\u00a0[15]: Copied! <pre>toggle_button = widgets.ToggleButton(\n    value=False,\n    description='Click me',\n    disabled=False,\n    button_style='success', # 'success', 'info', 'warning', 'danger' or ''\n    tooltip='Description',\n    icon='check' # (FontAwesome names without the `fa-` prefix)\n)\ntoggle_button\n</pre> toggle_button = widgets.ToggleButton(     value=False,     description='Click me',     disabled=False,     button_style='success', # 'success', 'info', 'warning', 'danger' or ''     tooltip='Description',     icon='check' # (FontAwesome names without the `fa-` prefix) ) toggle_button In\u00a0[16]: Copied! <pre>toggle_button.value\n</pre> toggle_button.value Out[16]: <pre>False</pre> In\u00a0[17]: Copied! <pre>checkbox = widgets.Checkbox(\n    value=False,\n    description='Check me',\n    disabled=False,\n    indent=False\n)\ncheckbox\n</pre> checkbox = widgets.Checkbox(     value=False,     description='Check me',     disabled=False,     indent=False ) checkbox In\u00a0[18]: Copied! <pre>checkbox.value\n</pre> checkbox.value Out[18]: <pre>False</pre> In\u00a0[19]: Copied! <pre>dropdown = widgets.Dropdown(\n    options=['USA', 'Canada', 'Mexico'],\n    value='Canada',\n    description='Country:'\n)\ndropdown\n</pre> dropdown = widgets.Dropdown(     options=['USA', 'Canada', 'Mexico'],     value='Canada',     description='Country:' ) dropdown In\u00a0[20]: Copied! <pre>dropdown.value\n</pre> dropdown.value Out[20]: <pre>'Canada'</pre> In\u00a0[21]: Copied! <pre>radio_buttons = widgets.RadioButtons(\n    options=['USA', 'Canada', 'Mexico'],\n    value='Canada',\n    description='Country:'\n)\nradio_buttons\n</pre> radio_buttons = widgets.RadioButtons(     options=['USA', 'Canada', 'Mexico'],     value='Canada',     description='Country:' ) radio_buttons In\u00a0[22]: Copied! <pre>radio_buttons.value\n</pre> radio_buttons.value Out[22]: <pre>'Canada'</pre> In\u00a0[23]: Copied! <pre>text = widgets.Text(\n    value='USA',\n    placeholder='Enter a country name',\n    description='Country:',\n    disabled=False\n)\ntext\n</pre> text = widgets.Text(     value='USA',     placeholder='Enter a country name',     description='Country:',     disabled=False ) text In\u00a0[24]: Copied! <pre>text.value\n</pre> text.value Out[24]: <pre>'USA'</pre> In\u00a0[25]: Copied! <pre>widgets.Textarea(\n    value='Hello World',\n    placeholder='Type something',\n    description='String:',\n    disabled=False\n)\n</pre> widgets.Textarea(     value='Hello World',     placeholder='Type something',     description='String:',     disabled=False ) In\u00a0[26]: Copied! <pre>widgets.HTML(\n    value=\"Hello &lt;b&gt;World&lt;/b&gt;\",\n    placeholder='Some HTML',\n    description='Some HTML',\n)\n</pre> widgets.HTML(     value=\"Hello World\",     placeholder='Some HTML',     description='Some HTML', ) In\u00a0[27]: Copied! <pre>widgets.HTML(\n    value='&lt;img src=\"https://earthengine.google.com/static/images/earth-engine-logo.png\" width=\"100\" height=\"100\"&gt;'\n)\n</pre> widgets.HTML(     value='' ) In\u00a0[28]: Copied! <pre>button = widgets.Button(\n    description='Click me',\n    button_style='info', # 'success', 'info', 'warning', 'danger' or ''\n    tooltip='Click me',\n    icon='check' # (FontAwesome names without the `fa-` prefix)\n)\nbutton\n</pre> button = widgets.Button(     description='Click me',     button_style='info', # 'success', 'info', 'warning', 'danger' or ''     tooltip='Click me',     icon='check' # (FontAwesome names without the `fa-` prefix) ) button In\u00a0[29]: Copied! <pre>date_picker = widgets.DatePicker(\n    description='Pick a Date',\n    disabled=False\n)\ndate_picker\n</pre> date_picker = widgets.DatePicker(     description='Pick a Date',     disabled=False ) date_picker In\u00a0[30]: Copied! <pre>date_picker.value\n</pre> date_picker.value In\u00a0[31]: Copied! <pre>color_picker = widgets.ColorPicker(\n    concise=False,\n    description='Pick a color',\n    value='blue',\n    disabled=False\n)\ncolor_picker\n</pre> color_picker = widgets.ColorPicker(     concise=False,     description='Pick a color',     value='blue',     disabled=False ) color_picker In\u00a0[32]: Copied! <pre>color_picker.value\n</pre> color_picker.value Out[32]: <pre>'blue'</pre> In\u00a0[33]: Copied! <pre>out = widgets.Output(layout={'border': '1px solid black'})\nout\n</pre> out = widgets.Output(layout={'border': '1px solid black'}) out In\u00a0[34]: Copied! <pre>with out:\n    for i in range(10):\n        print(i, 'Hello world!')\n</pre> with out:     for i in range(10):         print(i, 'Hello world!') In\u00a0[35]: Copied! <pre>from IPython.display import YouTubeVideo\nout.clear_output()\nwith out:\n    display(YouTubeVideo('mA21Us_3m28'))\nout\n</pre> from IPython.display import YouTubeVideo out.clear_output() with out:     display(YouTubeVideo('mA21Us_3m28')) out In\u00a0[36]: Copied! <pre>out.clear_output()\nwith out:\n    display(widgets.IntSlider())\nout\n</pre> out.clear_output() with out:     display(widgets.IntSlider()) out In\u00a0[37]: Copied! <pre>import ipywidgets as widgets\nfrom ipyleaflet import WidgetControl\n</pre> import ipywidgets as widgets from ipyleaflet import WidgetControl In\u00a0[38]: Copied! <pre>m = geoproject.Map()\nm\n</pre> m = geoproject.Map() m In\u00a0[39]: Copied! <pre>output_widget = widgets.Output(layout={'border': '1px solid black'})\noutput_control = WidgetControl(widget=output_widget, position='bottomright')\nm.add_control(output_control)\n</pre> output_widget = widgets.Output(layout={'border': '1px solid black'}) output_control = WidgetControl(widget=output_widget, position='bottomright') m.add_control(output_control) In\u00a0[40]: Copied! <pre>with output_widget:\n    print('Nice map!')\n</pre> with output_widget:     print('Nice map!') In\u00a0[41]: Copied! <pre>output_widget.clear_output()\nlogo = widgets.HTML(\n    value='&lt;img src=\"https://earthengine.google.com/static/images/earth-engine-logo.png\" width=\"100\" height=\"100\"&gt;'\n)\nwith output_widget:\n    display(logo)\n</pre> output_widget.clear_output() logo = widgets.HTML(     value='' ) with output_widget:     display(logo) In\u00a0[42]: Copied! <pre>def handle_interaction(**kwargs):\n    latlon = kwargs.get('coordinates')\n    # latlon = [round(x, 2) for x in latlon]\n    if kwargs.get('type') == 'click':\n        with output_widget:\n            output_widget.clear_output()\n            print('You clicked at: {}'.format(latlon))\n\nm.on_interaction(handle_interaction)\n</pre> def handle_interaction(**kwargs):     latlon = kwargs.get('coordinates')     # latlon = [round(x, 2) for x in latlon]     if kwargs.get('type') == 'click':         with output_widget:             output_widget.clear_output()             print('You clicked at: {}'.format(latlon))  m.on_interaction(handle_interaction)"},{"location":"examples/ipywidgets/#import-libraries","title":"Import libraries\u00b6","text":""},{"location":"examples/ipywidgets/#create-an-interactive-map","title":"Create an interactive map\u00b6","text":""},{"location":"examples/ipywidgets/#change-layer-opacity","title":"Change layer opacity\u00b6","text":""},{"location":"examples/ipywidgets/#widget-list","title":"Widget list\u00b6","text":"<p>Widget list: https://ipywidgets.readthedocs.io/en/latest/examples/Widget%20List.html</p> <p>Icons: https://fontawesome.com/v4.7.0/icons</p>"},{"location":"examples/ipywidgets/#numeric-widgets","title":"Numeric widgets\u00b6","text":""},{"location":"examples/ipywidgets/#intslider","title":"IntSlider\u00b6","text":""},{"location":"examples/ipywidgets/#floatslider","title":"FloatSlider\u00b6","text":""},{"location":"examples/ipywidgets/#intprogress","title":"IntProgress\u00b6","text":""},{"location":"examples/ipywidgets/#boolean-widgets","title":"Boolean widgets\u00b6","text":""},{"location":"examples/ipywidgets/#togglebutton","title":"ToggleButton\u00b6","text":""},{"location":"examples/ipywidgets/#checkbox","title":"Checkbox\u00b6","text":""},{"location":"examples/ipywidgets/#selection-widgets","title":"Selection widgets\u00b6","text":""},{"location":"examples/ipywidgets/#dropdown","title":"Dropdown\u00b6","text":""},{"location":"examples/ipywidgets/#radiobuttons","title":"RadioButtons\u00b6","text":""},{"location":"examples/ipywidgets/#string-widgets","title":"String widgets\u00b6","text":""},{"location":"examples/ipywidgets/#text","title":"Text\u00b6","text":""},{"location":"examples/ipywidgets/#textarea","title":"Textarea\u00b6","text":""},{"location":"examples/ipywidgets/#html","title":"HTML\u00b6","text":""},{"location":"examples/ipywidgets/#button","title":"Button\u00b6","text":""},{"location":"examples/ipywidgets/#date-picker","title":"Date picker\u00b6","text":""},{"location":"examples/ipywidgets/#color-picker","title":"Color picker\u00b6","text":""},{"location":"examples/ipywidgets/#output-widget","title":"Output widget\u00b6","text":""},{"location":"examples/ipywidgets/#add-a-widget-to-the-map","title":"Add a widget to the map\u00b6","text":""},{"location":"examples/ipywidgets_box/","title":"Ipywidgets box","text":"In\u00a0[1]: Copied! <pre># import geemap\n# Map = geemap.Map()\n# Map\n# !pip install ipywidgets==8.0.4\n</pre> # import geemap # Map = geemap.Map() # Map # !pip install ipywidgets==8.0.4 In\u00a0[2]: Copied! <pre>import ipywidgets as widgets\nprint(widgets.__version__)\n</pre> import ipywidgets as widgets print(widgets.__version__) <pre>7.7.5\n</pre> In\u00a0[3]: Copied! <pre>widget_width = \"250px\"\npadding = \"0px 0px 0px 4px\"  # upper, right, bottom, left\n</pre> widget_width = \"250px\" padding = \"0px 0px 0px 4px\"  # upper, right, bottom, left <p>icon: https://fontawesome.com/v4.7.0/icons/</p> In\u00a0[4]: Copied! <pre>toolbar_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Toolbar\",\n    icon=\"gear\",\n    layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n)\ndisplay(toolbar_button)\n</pre> toolbar_button = widgets.ToggleButton(     value=False,     tooltip=\"Toolbar\",     icon=\"gear\",     layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding), ) display(toolbar_button) In\u00a0[5]: Copied! <pre># toolbar_button.layout.width = \"28px\"\n</pre> # toolbar_button.layout.width = \"28px\" In\u00a0[6]: Copied! <pre>toolbar_button.value\n</pre> toolbar_button.value Out[6]: <pre>False</pre> In\u00a0[7]: Copied! <pre>close_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Close the tool\",\n    icon=\"times\",\n    button_style=\"primary\",\n    layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n)\nclose_button\n</pre> close_button = widgets.ToggleButton(     value=False,     tooltip=\"Close the tool\",     icon=\"times\",     button_style=\"primary\",     layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding), ) close_button In\u00a0[8]: Copied! <pre>widgets.HBox([close_button, toolbar_button])\n</pre> widgets.HBox([close_button, toolbar_button]) In\u00a0[9]: Copied! <pre>box = widgets.HBox()\nbox.children = [close_button, toolbar_button]\nbox\n</pre> box = widgets.HBox() box.children = [close_button, toolbar_button] box In\u00a0[10]: Copied! <pre>checkbox = widgets.Checkbox(\n    description=\"Checkbox\",\n    indent=False,\n    layout=widgets.Layout(padding=padding, width=widget_width),\n)\ncheckbox\n</pre> checkbox = widgets.Checkbox(     description=\"Checkbox\",     indent=False,     layout=widgets.Layout(padding=padding, width=widget_width), ) checkbox In\u00a0[11]: Copied! <pre>dropdown = widgets.Dropdown(\n    options=[\"Option 1\", \"Option 2\", \"Option 3\"],\n    value=None,\n    description=\"Dropdown:\",\n    layout=widgets.Layout(width=widget_width, padding=padding),\n    style={\"description_width\": \"initial\"},\n)\ndropdown\n</pre> dropdown = widgets.Dropdown(     options=[\"Option 1\", \"Option 2\", \"Option 3\"],     value=None,     description=\"Dropdown:\",     layout=widgets.Layout(width=widget_width, padding=padding),     style={\"description_width\": \"initial\"}, ) dropdown In\u00a0[12]: Copied! <pre>int_slider = widgets.IntSlider(\n    min=1,\n    max=14,\n    description=\"Zoom: \",\n    readout=True,\n    continuous_update=True,\n    layout=widgets.Layout(width=widget_width, padding=padding),\n    style={\"description_width\": \"initial\"},\n)\nint_slider\n</pre> int_slider = widgets.IntSlider(     min=1,     max=14,     description=\"Zoom: \",     readout=True,     continuous_update=True,     layout=widgets.Layout(width=widget_width, padding=padding),     style={\"description_width\": \"initial\"}, ) int_slider In\u00a0[13]: Copied! <pre>float_slider = widgets.FloatSlider(\n    min=1,\n    max=100,\n    description=\"Float Slider: \",\n    readout=True,\n    continuous_update=True,\n    layout=widgets.Layout(width=widget_width, padding=padding),\n    style={\"description_width\": \"initial\"},\n)\n</pre> float_slider = widgets.FloatSlider(     min=1,     max=100,     description=\"Float Slider: \",     readout=True,     continuous_update=True,     layout=widgets.Layout(width=widget_width, padding=padding),     style={\"description_width\": \"initial\"}, ) In\u00a0[14]: Copied! <pre>color = widgets.ColorPicker(\n    concise=False,\n    description=\"Color:\",\n    value=\"white\",\n    style={\"description_width\": \"initial\"},\n    layout=widgets.Layout(width=widget_width, padding=padding),\n)\ncolor\n</pre> color = widgets.ColorPicker(     concise=False,     description=\"Color:\",     value=\"white\",     style={\"description_width\": \"initial\"},     layout=widgets.Layout(width=widget_width, padding=padding), ) color In\u00a0[15]: Copied! <pre>text = widgets.Text(\n    value=\"\",\n    description=\"Textbox:\",\n    placeholder=\"Enter sth.\",\n    style={\"description_width\": \"initial\"},\n    layout=widgets.Layout(width=widget_width, padding=padding),\n)\ntext\n</pre> text = widgets.Text(     value=\"\",     description=\"Textbox:\",     placeholder=\"Enter sth.\",     style={\"description_width\": \"initial\"},     layout=widgets.Layout(width=widget_width, padding=padding), ) text In\u00a0[16]: Copied! <pre>textarea = widgets.Textarea(\n    placeholder=\"Placeholder\",\n    layout=widgets.Layout(width=widget_width),\n)\ntextarea\n</pre> textarea = widgets.Textarea(     placeholder=\"Placeholder\",     layout=widgets.Layout(width=widget_width), ) textarea In\u00a0[17]: Copied! <pre>buttons = widgets.ToggleButtons(\n    value=None,\n    options=[\"Apply\", \"Reset\", \"Close\"],\n    tooltips=[\"Apply\", \"Reset\", \"Close\"],\n    button_style=\"primary\",\n)\nbuttons.style.button_width = \"80px\"\nbuttons\n</pre> buttons = widgets.ToggleButtons(     value=None,     options=[\"Apply\", \"Reset\", \"Close\"],     tooltips=[\"Apply\", \"Reset\", \"Close\"],     button_style=\"primary\", ) buttons.style.button_width = \"80px\" buttons In\u00a0[18]: Copied! <pre>output = widgets.Output(layout=widgets.Layout(width=widget_width, padding=padding))\nwith output:\n    output.clear_output()\n    print(\"Running ...\")\n    display(buttons)\n    print(buttons.value)\noutput\n</pre> output = widgets.Output(layout=widgets.Layout(width=widget_width, padding=padding)) with output:     output.clear_output()     print(\"Running ...\")     display(buttons)     print(buttons.value) output In\u00a0[19]: Copied! <pre>toolbar_widget = widgets.VBox()\ntoolbar_widget.children = [\n    widgets.HBox([close_button, toolbar_button]),\n    checkbox,\n    int_slider,\n    float_slider,\n    dropdown,\n    text,\n    color,\n    textarea,\n    buttons,\n]\ntoolbar_widget\n</pre> toolbar_widget = widgets.VBox() toolbar_widget.children = [     widgets.HBox([close_button, toolbar_button]),     checkbox,     int_slider,     float_slider,     dropdown,     text,     color,     textarea,     buttons, ] toolbar_widget In\u00a0[20]: Copied! <pre>import ipyleaflet\ncontrol = ipyleaflet.WidgetControl(widget=toolbar_widget,position='topright')\nm = ipyleaflet.Map(center=[40,-100],zoom=4,scroll_wheel_zoom=True)\nm\n</pre> import ipyleaflet control = ipyleaflet.WidgetControl(widget=toolbar_widget,position='topright') m = ipyleaflet.Map(center=[40,-100],zoom=4,scroll_wheel_zoom=True) m In\u00a0[21]: Copied! <pre>m.add_control(control)\n</pre> m.add_control(control) In\u00a0[22]: Copied! <pre>widgets.jslink((m,'zoom'), (int_slider,'value'))\nwidgets.jslink((m,'center'), (text,'value'))\n</pre> widgets.jslink((m,'zoom'), (int_slider,'value')) widgets.jslink((m,'center'), (text,'value')) <pre>Link(source=(Map(center=[40, -100], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title'\u2026</pre> In\u00a0[23]: Copied! <pre>m.zoom\n</pre> m.zoom Out[23]: <pre>4.0</pre>"},{"location":"examples/ipywidgets_events/","title":"Ipywidgets events","text":"In\u00a0[1]: Copied! <pre>import ipywidgets as widgets\n</pre> import ipywidgets as widgets In\u00a0[2]: Copied! <pre>print(widgets.Button.on_click.__doc__)\n</pre> print(widgets.Button.on_click.__doc__) <pre>Register a callback to execute when the button is clicked.\n\n        The callback will be called with one argument, the clicked button\n        widget instance.\n\n        Parameters\n        ----------\n        remove: bool (optional)\n            Set to true to remove the callback from the list of callbacks.\n        \n</pre> In\u00a0[3]: Copied! <pre>button = widgets.Button(description=\"Click Me!\", button_style=\"primary\")\noutput = widgets.Output()\n\ndef on_button_clicked(b):\n    with output:\n        print(\"Button clicked.\")\n\nbutton.on_click(on_button_clicked)\n\nwidgets.VBox([button, output])\n</pre> button = widgets.Button(description=\"Click Me!\", button_style=\"primary\") output = widgets.Output()  def on_button_clicked(b):     with output:         print(\"Button clicked.\")  button.on_click(on_button_clicked)  widgets.VBox([button, output]) In\u00a0[4]: Copied! <pre>print(widgets.Widget.observe.__doc__)\n</pre> print(widgets.Widget.observe.__doc__) <pre>Setup a handler to be called when a trait changes.\n\n        This is used to setup dynamic notifications of trait changes.\n\n        Parameters\n        ----------\n        handler : callable\n            A callable that is called when a trait changes. Its\n            signature should be ``handler(change)``, where ``change`` is a\n            dictionary. The change dictionary at least holds a 'type' key.\n            * ``type``: the type of notification.\n            Other keys may be passed depending on the value of 'type'. In the\n            case where type is 'change', we also have the following keys:\n            * ``owner`` : the HasTraits instance\n            * ``old`` : the old value of the modified trait attribute\n            * ``new`` : the new value of the modified trait attribute\n            * ``name`` : the name of the modified trait attribute.\n        names : list, str, All\n            If names is All, the handler will apply to all traits.  If a list\n            of str, handler will apply to all names in the list.  If a\n            str, the handler will apply just to that name.\n        type : str, All (default: 'change')\n            The type of notification to filter by. If equal to All, then all\n            notifications are passed to the observe handler.\n        \n</pre> In\u00a0[5]: Copied! <pre>buttons = widgets.ToggleButtons(\n    value=None,\n    options=[\"Show\", \"Hide\", \"Close\"],\n    button_style=\"primary\",\n)\nbuttons.style.button_width = \"80px\"\n\nhtml = widgets.HTML(\n    value='&lt;img src=\"https://earthengine.google.com/static/images/earth-engine-logo.png\" width=\"100\" height=\"100\"&gt;'\n)\n\nvbox = widgets.VBox([buttons, html])\nvbox\n</pre> buttons = widgets.ToggleButtons(     value=None,     options=[\"Show\", \"Hide\", \"Close\"],     button_style=\"primary\", ) buttons.style.button_width = \"80px\"  html = widgets.HTML(     value='' )  vbox = widgets.VBox([buttons, html]) vbox In\u00a0[6]: Copied! <pre>def handle_btn_click(change):\n    \n    if change['new'] == 'Show':\n        vbox.children = [buttons, html]\n    elif change['new'] == 'Hide':\n        vbox.children = [buttons]\n    elif change['new'] == 'Close':\n        buttons.close()\n        html.close()\n        vbox.close()\n        \nbuttons.observe(handle_btn_click, \"value\")\n</pre> def handle_btn_click(change):          if change['new'] == 'Show':         vbox.children = [buttons, html]     elif change['new'] == 'Hide':         vbox.children = [buttons]     elif change['new'] == 'Close':         buttons.close()         html.close()         vbox.close()          buttons.observe(handle_btn_click, \"value\") In\u00a0[7]: Copied! <pre>dropdown = widgets.Dropdown(\n    options=[\"Landsat\", \"Sentinel\", \"MODIS\"],\n    value=None,\n    description=\"Satellite:\",\n    style={\"description_width\": \"initial\"},\n    layout=widgets.Layout(width=\"250px\")\n)\n\nbtns = widgets.ToggleButtons(\n    value=None,\n    options=[\"Apply\", \"Reset\", \"Close\"],\n    button_style=\"primary\",\n)\nbtns.style.button_width = \"80px\"\n\noutput = widgets.Output()\n\nbox = widgets.VBox([dropdown, btns, output])\nbox\n</pre> dropdown = widgets.Dropdown(     options=[\"Landsat\", \"Sentinel\", \"MODIS\"],     value=None,     description=\"Satellite:\",     style={\"description_width\": \"initial\"},     layout=widgets.Layout(width=\"250px\") )  btns = widgets.ToggleButtons(     value=None,     options=[\"Apply\", \"Reset\", \"Close\"],     button_style=\"primary\", ) btns.style.button_width = \"80px\"  output = widgets.Output()  box = widgets.VBox([dropdown, btns, output]) box In\u00a0[8]: Copied! <pre>def dropdown_change(change):\n    if change['new']:\n        with output:\n            output.clear_output()\n            print(change['new'])\n            \ndropdown.observe(dropdown_change, \"value\")\n</pre> def dropdown_change(change):     if change['new']:         with output:             output.clear_output()             print(change['new'])              dropdown.observe(dropdown_change, \"value\") In\u00a0[9]: Copied! <pre>def button_click(change):\n    with output:\n        output.clear_output()\n        if change['new'] == \"Apply\":\n            if dropdown.value is None:\n                print(\"Please select a satellite from the dropdown list.\")\n            else:\n                print(f\"You selected {dropdown.value}\")\n        elif change['new'] == 'Reset':\n            dropdown.value = None\n        else:\n            box.close()\n            \nbtns.observe(button_click, \"value\")\n</pre> def button_click(change):     with output:         output.clear_output()         if change['new'] == \"Apply\":             if dropdown.value is None:                 print(\"Please select a satellite from the dropdown list.\")             else:                 print(f\"You selected {dropdown.value}\")         elif change['new'] == 'Reset':             dropdown.value = None         else:             box.close()              btns.observe(button_click, \"value\") In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/ipywidgets_events/#button-event","title":"Button event\u00b6","text":"<p>https://ipywidgets.readthedocs.io/en/latest/examples/Widget%20Events.html#</p>"},{"location":"examples/ipywidgets_events/#other-widget-events","title":"Other widget events\u00b6","text":"<p>https://ipywidgets.readthedocs.io/en/latest/examples/Widget%20Events.html#Traitlet-events</p>"},{"location":"examples/ipywidgets_events/#first-example","title":"First example\u00b6","text":""},{"location":"examples/ipywidgets_events/#second-example","title":"Second example\u00b6","text":""},{"location":"examples/ipywidgets_events/#third-example","title":"Third example\u00b6","text":"<ul> <li>https://leafmap.org/notebooks/02_using_basemaps/</li> </ul>"},{"location":"examples/toolbar/","title":"Toolbar","text":"In\u00a0[1]: Copied! <pre>!pip install geoproject\n</pre> !pip install geoproject <pre>Requirement already satisfied: geoproject in /opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages (0.0.4)\r\nRequirement already satisfied: folium in /home/runner/.local/lib/python3.9/site-packages (from geoproject) (0.13.0)\r\nRequirement already satisfied: ipyleaflet in /home/runner/.local/lib/python3.9/site-packages (from geoproject) (0.17.2)\r\nRequirement already satisfied: geopandas in /home/runner/.local/lib/python3.9/site-packages (from geoproject) (0.13.0)\r\nRequirement already satisfied: httpx in /home/runner/.local/lib/python3.9/site-packages (from geoproject) (0.24.1)\r\nRequirement already satisfied: leafmap in /home/runner/.local/lib/python3.9/site-packages (from geoproject) (0.20.4)\r\nRequirement already satisfied: streamlit-folium in /home/runner/.local/lib/python3.9/site-packages (from geoproject) (0.11.1)\r\nRequirement already satisfied: branca&gt;=0.3.0 in /home/runner/.local/lib/python3.9/site-packages (from folium-&gt;geoproject) (0.6.0)\r\nRequirement already satisfied: jinja2&gt;=2.9 in /home/runner/.local/lib/python3.9/site-packages (from folium-&gt;geoproject) (3.1.2)\r\nRequirement already satisfied: numpy in /home/runner/.local/lib/python3.9/site-packages (from folium-&gt;geoproject) (1.24.3)\r\nRequirement already satisfied: requests in /home/runner/.local/lib/python3.9/site-packages (from folium-&gt;geoproject) (2.31.0)\r\nRequirement already satisfied: fiona&gt;=1.8.19 in /home/runner/.local/lib/python3.9/site-packages (from geopandas-&gt;geoproject) (1.9.4.post1)\r\nRequirement already satisfied: packaging in /home/runner/.local/lib/python3.9/site-packages (from geopandas-&gt;geoproject) (23.1)\r\nRequirement already satisfied: pandas&gt;=1.1.0 in /home/runner/.local/lib/python3.9/site-packages (from geopandas-&gt;geoproject) (2.0.1)\r\nRequirement already satisfied: pyproj&gt;=3.0.1 in /home/runner/.local/lib/python3.9/site-packages (from geopandas-&gt;geoproject) (3.5.0)\r\nRequirement already satisfied: shapely&gt;=1.7.1 in /home/runner/.local/lib/python3.9/site-packages (from geopandas-&gt;geoproject) (2.0.1)\r\nRequirement already satisfied: certifi in /home/runner/.local/lib/python3.9/site-packages (from httpx-&gt;geoproject) (2023.5.7)\r\nRequirement already satisfied: httpcore&lt;0.18.0,&gt;=0.15.0 in /home/runner/.local/lib/python3.9/site-packages (from httpx-&gt;geoproject) (0.17.2)\r\nRequirement already satisfied: idna in /home/runner/.local/lib/python3.9/site-packages (from httpx-&gt;geoproject) (3.4)\r\nRequirement already satisfied: sniffio in /home/runner/.local/lib/python3.9/site-packages (from httpx-&gt;geoproject) (1.3.0)\r\nRequirement already satisfied: ipywidgets&lt;9,&gt;=7.6.0 in /home/runner/.local/lib/python3.9/site-packages (from ipyleaflet-&gt;geoproject) (7.7.5)\r\nRequirement already satisfied: traittypes&lt;3,&gt;=0.2.1 in /home/runner/.local/lib/python3.9/site-packages (from ipyleaflet-&gt;geoproject) (0.2.1)\r\nRequirement already satisfied: xyzservices&gt;=2021.8.1 in /home/runner/.local/lib/python3.9/site-packages (from ipyleaflet-&gt;geoproject) (2023.5.0)\r\nRequirement already satisfied: bqplot in /home/runner/.local/lib/python3.9/site-packages (from leafmap-&gt;geoproject) (0.12.39)\r\nRequirement already satisfied: colour in /home/runner/.local/lib/python3.9/site-packages (from leafmap-&gt;geoproject) (0.1.5)\r\nRequirement already satisfied: gdown in /home/runner/.local/lib/python3.9/site-packages (from leafmap-&gt;geoproject) (4.7.1)\r\nRequirement already satisfied: geojson in /home/runner/.local/lib/python3.9/site-packages (from leafmap-&gt;geoproject) (3.0.1)\r\nRequirement already satisfied: ipyevents in /home/runner/.local/lib/python3.9/site-packages (from leafmap-&gt;geoproject) (2.0.1)\r\nRequirement already satisfied: ipyfilechooser&gt;=0.6.0 in /home/runner/.local/lib/python3.9/site-packages (from leafmap-&gt;geoproject) (0.6.0)\r\nRequirement already satisfied: matplotlib in /home/runner/.local/lib/python3.9/site-packages (from leafmap-&gt;geoproject) (3.7.1)\r\nRequirement already satisfied: pyshp&gt;=2.1.3 in /home/runner/.local/lib/python3.9/site-packages (from leafmap-&gt;geoproject) (2.3.1)\r\nRequirement already satisfied: pystac-client in /home/runner/.local/lib/python3.9/site-packages (from leafmap-&gt;geoproject) (0.6.1)\r\nRequirement already satisfied: python-box in /home/runner/.local/lib/python3.9/site-packages (from leafmap-&gt;geoproject) (7.0.1)\r\nRequirement already satisfied: scooby in /home/runner/.local/lib/python3.9/site-packages (from leafmap-&gt;geoproject) (0.7.2)\r\nRequirement already satisfied: whiteboxgui&gt;=0.6.0 in /home/runner/.local/lib/python3.9/site-packages (from leafmap-&gt;geoproject) (2.3.0)\r\nRequirement already satisfied: streamlit&gt;=1.13.0 in /home/runner/.local/lib/python3.9/site-packages (from streamlit-folium-&gt;geoproject) (1.22.0)\r\nRequirement already satisfied: attrs&gt;=19.2.0 in /home/runner/.local/lib/python3.9/site-packages (from fiona&gt;=1.8.19-&gt;geopandas-&gt;geoproject) (23.1.0)\r\nRequirement already satisfied: click~=8.0 in /home/runner/.local/lib/python3.9/site-packages (from fiona&gt;=1.8.19-&gt;geopandas-&gt;geoproject) (8.1.3)\r\nRequirement already satisfied: click-plugins&gt;=1.0 in /home/runner/.local/lib/python3.9/site-packages (from fiona&gt;=1.8.19-&gt;geopandas-&gt;geoproject) (1.1.1)\r\nRequirement already satisfied: cligj&gt;=0.5 in /home/runner/.local/lib/python3.9/site-packages (from fiona&gt;=1.8.19-&gt;geopandas-&gt;geoproject) (0.7.2)\r\nRequirement already satisfied: six in /home/runner/.local/lib/python3.9/site-packages (from fiona&gt;=1.8.19-&gt;geopandas-&gt;geoproject) (1.16.0)\r\nRequirement already satisfied: importlib-metadata in /home/runner/.local/lib/python3.9/site-packages (from fiona&gt;=1.8.19-&gt;geopandas-&gt;geoproject) (6.6.0)\r\nRequirement already satisfied: h11&lt;0.15,&gt;=0.13 in /home/runner/.local/lib/python3.9/site-packages (from httpcore&lt;0.18.0,&gt;=0.15.0-&gt;httpx-&gt;geoproject) (0.14.0)\r\nRequirement already satisfied: anyio&lt;5.0,&gt;=3.0 in /home/runner/.local/lib/python3.9/site-packages (from httpcore&lt;0.18.0,&gt;=0.15.0-&gt;httpx-&gt;geoproject) (3.6.2)\r\nRequirement already satisfied: ipykernel&gt;=4.5.1 in /home/runner/.local/lib/python3.9/site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (6.23.1)\r\nRequirement already satisfied: ipython-genutils~=0.2.0 in /home/runner/.local/lib/python3.9/site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (0.2.0)\r\nRequirement already satisfied: traitlets&gt;=4.3.1 in /home/runner/.local/lib/python3.9/site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (5.9.0)\r\nRequirement already satisfied: widgetsnbextension~=3.6.4 in /home/runner/.local/lib/python3.9/site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (3.6.4)\r\nRequirement already satisfied: ipython&gt;=4.0.0 in /home/runner/.local/lib/python3.9/site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (8.13.2)\r\nRequirement already satisfied: jupyterlab-widgets&lt;3,&gt;=1.0.0 in /home/runner/.local/lib/python3.9/site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (1.1.4)\r\nRequirement already satisfied: MarkupSafe&gt;=2.0 in /home/runner/.local/lib/python3.9/site-packages (from jinja2&gt;=2.9-&gt;folium-&gt;geoproject) (2.1.2)\r\nRequirement already satisfied: python-dateutil&gt;=2.8.2 in /home/runner/.local/lib/python3.9/site-packages (from pandas&gt;=1.1.0-&gt;geopandas-&gt;geoproject) (2.8.2)\r\nRequirement already satisfied: pytz&gt;=2020.1 in /home/runner/.local/lib/python3.9/site-packages (from pandas&gt;=1.1.0-&gt;geopandas-&gt;geoproject) (2023.3)\r\nRequirement already satisfied: tzdata&gt;=2022.1 in /home/runner/.local/lib/python3.9/site-packages (from pandas&gt;=1.1.0-&gt;geopandas-&gt;geoproject) (2023.3)\r\nRequirement already satisfied: altair&lt;5,&gt;=3.2.0 in /home/runner/.local/lib/python3.9/site-packages (from streamlit&gt;=1.13.0-&gt;streamlit-folium-&gt;geoproject) (4.2.2)\r\nRequirement already satisfied: blinker&gt;=1.0.0 in /home/runner/.local/lib/python3.9/site-packages (from streamlit&gt;=1.13.0-&gt;streamlit-folium-&gt;geoproject) (1.6.2)\r\nRequirement already satisfied: cachetools&gt;=4.0 in /home/runner/.local/lib/python3.9/site-packages (from streamlit&gt;=1.13.0-&gt;streamlit-folium-&gt;geoproject) (5.3.0)\r\nRequirement already satisfied: pillow&gt;=6.2.0 in /home/runner/.local/lib/python3.9/site-packages (from streamlit&gt;=1.13.0-&gt;streamlit-folium-&gt;geoproject) (9.5.0)\r\nRequirement already satisfied: protobuf&lt;4,&gt;=3.12 in /home/runner/.local/lib/python3.9/site-packages (from streamlit&gt;=1.13.0-&gt;streamlit-folium-&gt;geoproject) (3.20.3)\r\nRequirement already satisfied: pyarrow&gt;=4.0 in /home/runner/.local/lib/python3.9/site-packages (from streamlit&gt;=1.13.0-&gt;streamlit-folium-&gt;geoproject) (12.0.0)\r\nRequirement already satisfied: pympler&gt;=0.9 in /home/runner/.local/lib/python3.9/site-packages (from streamlit&gt;=1.13.0-&gt;streamlit-folium-&gt;geoproject) (1.0.1)\r\nRequirement already satisfied: rich&gt;=10.11.0 in /home/runner/.local/lib/python3.9/site-packages (from streamlit&gt;=1.13.0-&gt;streamlit-folium-&gt;geoproject) (13.3.5)\r\nRequirement already satisfied: tenacity&lt;9,&gt;=8.0.0 in /home/runner/.local/lib/python3.9/site-packages (from streamlit&gt;=1.13.0-&gt;streamlit-folium-&gt;geoproject) (8.2.2)\r\nRequirement already satisfied: toml in /home/runner/.local/lib/python3.9/site-packages (from streamlit&gt;=1.13.0-&gt;streamlit-folium-&gt;geoproject) (0.10.2)\r\nRequirement already satisfied: typing-extensions&gt;=3.10.0.0 in /home/runner/.local/lib/python3.9/site-packages (from streamlit&gt;=1.13.0-&gt;streamlit-folium-&gt;geoproject) (4.6.2)\r\nRequirement already satisfied: tzlocal&gt;=1.1 in /home/runner/.local/lib/python3.9/site-packages (from streamlit&gt;=1.13.0-&gt;streamlit-folium-&gt;geoproject) (5.0.1)\r\nRequirement already satisfied: validators&gt;=0.2 in /home/runner/.local/lib/python3.9/site-packages (from streamlit&gt;=1.13.0-&gt;streamlit-folium-&gt;geoproject) (0.20.0)\r\nRequirement already satisfied: gitpython!=3.1.19 in /home/runner/.local/lib/python3.9/site-packages (from streamlit&gt;=1.13.0-&gt;streamlit-folium-&gt;geoproject) (3.1.31)\r\nRequirement already satisfied: pydeck&gt;=0.1.dev5 in /home/runner/.local/lib/python3.9/site-packages (from streamlit&gt;=1.13.0-&gt;streamlit-folium-&gt;geoproject) (0.8.1b0)\r\nRequirement already satisfied: tornado&gt;=6.0.3 in /home/runner/.local/lib/python3.9/site-packages (from streamlit&gt;=1.13.0-&gt;streamlit-folium-&gt;geoproject) (6.3.2)\r\nRequirement already satisfied: watchdog in /home/runner/.local/lib/python3.9/site-packages (from streamlit&gt;=1.13.0-&gt;streamlit-folium-&gt;geoproject) (3.0.0)\r\nRequirement already satisfied: charset-normalizer&lt;4,&gt;=2 in /home/runner/.local/lib/python3.9/site-packages (from requests-&gt;folium-&gt;geoproject) (3.1.0)\r\nRequirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in /home/runner/.local/lib/python3.9/site-packages (from requests-&gt;folium-&gt;geoproject) (2.0.2)\r\nRequirement already satisfied: ipytree in /home/runner/.local/lib/python3.9/site-packages (from whiteboxgui&gt;=0.6.0-&gt;leafmap-&gt;geoproject) (0.2.2)\r\nRequirement already satisfied: whitebox in /home/runner/.local/lib/python3.9/site-packages (from whiteboxgui&gt;=0.6.0-&gt;leafmap-&gt;geoproject) (2.3.1)\r\nRequirement already satisfied: filelock in /home/runner/.local/lib/python3.9/site-packages (from gdown-&gt;leafmap-&gt;geoproject) (3.12.0)\r\nRequirement already satisfied: tqdm in /home/runner/.local/lib/python3.9/site-packages (from gdown-&gt;leafmap-&gt;geoproject) (4.65.0)\r\nRequirement already satisfied: beautifulsoup4 in /home/runner/.local/lib/python3.9/site-packages (from gdown-&gt;leafmap-&gt;geoproject) (4.12.2)\r\nRequirement already satisfied: contourpy&gt;=1.0.1 in /home/runner/.local/lib/python3.9/site-packages (from matplotlib-&gt;leafmap-&gt;geoproject) (1.0.7)\r\nRequirement already satisfied: cycler&gt;=0.10 in /home/runner/.local/lib/python3.9/site-packages (from matplotlib-&gt;leafmap-&gt;geoproject) (0.11.0)\r\nRequirement already satisfied: fonttools&gt;=4.22.0 in /home/runner/.local/lib/python3.9/site-packages (from matplotlib-&gt;leafmap-&gt;geoproject) (4.39.4)\r\nRequirement already satisfied: kiwisolver&gt;=1.0.1 in /home/runner/.local/lib/python3.9/site-packages (from matplotlib-&gt;leafmap-&gt;geoproject) (1.4.4)\r\nRequirement already satisfied: pyparsing&gt;=2.3.1 in /home/runner/.local/lib/python3.9/site-packages (from matplotlib-&gt;leafmap-&gt;geoproject) (3.0.9)\r\nRequirement already satisfied: importlib-resources&gt;=3.2.0 in /home/runner/.local/lib/python3.9/site-packages (from matplotlib-&gt;leafmap-&gt;geoproject) (5.12.0)\r\nRequirement already satisfied: pystac&gt;=1.7.0 in /home/runner/.local/lib/python3.9/site-packages (from pystac-client-&gt;leafmap-&gt;geoproject) (1.7.3)\r\nRequirement already satisfied: entrypoints in /home/runner/.local/lib/python3.9/site-packages (from altair&lt;5,&gt;=3.2.0-&gt;streamlit&gt;=1.13.0-&gt;streamlit-folium-&gt;geoproject) (0.4)\r\nRequirement already satisfied: jsonschema&gt;=3.0 in /home/runner/.local/lib/python3.9/site-packages (from altair&lt;5,&gt;=3.2.0-&gt;streamlit&gt;=1.13.0-&gt;streamlit-folium-&gt;geoproject) (4.17.3)\r\nRequirement already satisfied: toolz in /home/runner/.local/lib/python3.9/site-packages (from altair&lt;5,&gt;=3.2.0-&gt;streamlit&gt;=1.13.0-&gt;streamlit-folium-&gt;geoproject) (0.12.0)\r\nRequirement already satisfied: gitdb&lt;5,&gt;=4.0.1 in /home/runner/.local/lib/python3.9/site-packages (from gitpython!=3.1.19-&gt;streamlit&gt;=1.13.0-&gt;streamlit-folium-&gt;geoproject) (4.0.10)\r\nRequirement already satisfied: zipp&gt;=0.5 in /home/runner/.local/lib/python3.9/site-packages (from importlib-metadata-&gt;fiona&gt;=1.8.19-&gt;geopandas-&gt;geoproject) (3.15.0)\r\nRequirement already satisfied: comm&gt;=0.1.1 in /home/runner/.local/lib/python3.9/site-packages (from ipykernel&gt;=4.5.1-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (0.1.3)\r\nRequirement already satisfied: debugpy&gt;=1.6.5 in /home/runner/.local/lib/python3.9/site-packages (from ipykernel&gt;=4.5.1-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (1.6.7)\r\nRequirement already satisfied: jupyter-client&gt;=6.1.12 in /home/runner/.local/lib/python3.9/site-packages (from ipykernel&gt;=4.5.1-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (8.2.0)\r\nRequirement already satisfied: jupyter-core!=5.0.*,&gt;=4.12 in /home/runner/.local/lib/python3.9/site-packages (from ipykernel&gt;=4.5.1-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (5.3.0)\r\nRequirement already satisfied: matplotlib-inline&gt;=0.1 in /home/runner/.local/lib/python3.9/site-packages (from ipykernel&gt;=4.5.1-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (0.1.6)\r\nRequirement already satisfied: nest-asyncio in /home/runner/.local/lib/python3.9/site-packages (from ipykernel&gt;=4.5.1-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (1.5.6)\r\nRequirement already satisfied: psutil in /home/runner/.local/lib/python3.9/site-packages (from ipykernel&gt;=4.5.1-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (5.9.5)\r\nRequirement already satisfied: pyzmq&gt;=20 in /home/runner/.local/lib/python3.9/site-packages (from ipykernel&gt;=4.5.1-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (25.0.2)\r\nRequirement already satisfied: backcall in /home/runner/.local/lib/python3.9/site-packages (from ipython&gt;=4.0.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (0.2.0)\r\nRequirement already satisfied: decorator in /home/runner/.local/lib/python3.9/site-packages (from ipython&gt;=4.0.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (5.1.1)\r\nRequirement already satisfied: jedi&gt;=0.16 in /home/runner/.local/lib/python3.9/site-packages (from ipython&gt;=4.0.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (0.18.2)\r\nRequirement already satisfied: pickleshare in /home/runner/.local/lib/python3.9/site-packages (from ipython&gt;=4.0.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (0.7.5)\r\nRequirement already satisfied: prompt-toolkit!=3.0.37,&lt;3.1.0,&gt;=3.0.30 in /home/runner/.local/lib/python3.9/site-packages (from ipython&gt;=4.0.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (3.0.38)\r\nRequirement already satisfied: pygments&gt;=2.4.0 in /home/runner/.local/lib/python3.9/site-packages (from ipython&gt;=4.0.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (2.15.1)\r\nRequirement already satisfied: stack-data in /home/runner/.local/lib/python3.9/site-packages (from ipython&gt;=4.0.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (0.6.2)\r\nRequirement already satisfied: pexpect&gt;4.3 in /home/runner/.local/lib/python3.9/site-packages (from ipython&gt;=4.0.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (4.8.0)\r\nRequirement already satisfied: markdown-it-py&lt;3.0.0,&gt;=2.2.0 in /home/runner/.local/lib/python3.9/site-packages (from rich&gt;=10.11.0-&gt;streamlit&gt;=1.13.0-&gt;streamlit-folium-&gt;geoproject) (2.2.0)\r\nRequirement already satisfied: notebook&gt;=4.4.1 in /home/runner/.local/lib/python3.9/site-packages (from widgetsnbextension~=3.6.4-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (6.5.4)\r\nRequirement already satisfied: soupsieve&gt;1.2 in /home/runner/.local/lib/python3.9/site-packages (from beautifulsoup4-&gt;gdown-&gt;leafmap-&gt;geoproject) (2.4.1)\r\nRequirement already satisfied: PySocks!=1.5.7,&gt;=1.5.6 in /home/runner/.local/lib/python3.9/site-packages (from requests-&gt;folium-&gt;geoproject) (1.7.1)\r\nRequirement already satisfied: smmap&lt;6,&gt;=3.0.1 in /home/runner/.local/lib/python3.9/site-packages (from gitdb&lt;5,&gt;=4.0.1-&gt;gitpython!=3.1.19-&gt;streamlit&gt;=1.13.0-&gt;streamlit-folium-&gt;geoproject) (5.0.0)\r\nRequirement already satisfied: parso&lt;0.9.0,&gt;=0.8.0 in /home/runner/.local/lib/python3.9/site-packages (from jedi&gt;=0.16-&gt;ipython&gt;=4.0.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (0.8.3)\r\nRequirement already satisfied: pyrsistent!=0.17.0,!=0.17.1,!=0.17.2,&gt;=0.14.0 in /home/runner/.local/lib/python3.9/site-packages (from jsonschema&gt;=3.0-&gt;altair&lt;5,&gt;=3.2.0-&gt;streamlit&gt;=1.13.0-&gt;streamlit-folium-&gt;geoproject) (0.19.3)\r\nRequirement already satisfied: platformdirs&gt;=2.5 in /home/runner/.local/lib/python3.9/site-packages (from jupyter-core!=5.0.*,&gt;=4.12-&gt;ipykernel&gt;=4.5.1-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (3.5.1)\r\nRequirement already satisfied: mdurl~=0.1 in /home/runner/.local/lib/python3.9/site-packages (from markdown-it-py&lt;3.0.0,&gt;=2.2.0-&gt;rich&gt;=10.11.0-&gt;streamlit&gt;=1.13.0-&gt;streamlit-folium-&gt;geoproject) (0.1.2)\r\nRequirement already satisfied: argon2-cffi in /home/runner/.local/lib/python3.9/site-packages (from notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.4-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (21.3.0)\r\nRequirement already satisfied: nbformat in /home/runner/.local/lib/python3.9/site-packages (from notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.4-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (5.8.0)\r\nRequirement already satisfied: nbconvert&gt;=5 in /home/runner/.local/lib/python3.9/site-packages (from notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.4-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (7.4.0)\r\nRequirement already satisfied: Send2Trash&gt;=1.8.0 in /home/runner/.local/lib/python3.9/site-packages (from notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.4-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (1.8.2)\r\nRequirement already satisfied: terminado&gt;=0.8.3 in /home/runner/.local/lib/python3.9/site-packages (from notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.4-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (0.17.1)\r\nRequirement already satisfied: prometheus-client in /home/runner/.local/lib/python3.9/site-packages (from notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.4-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (0.17.0)\r\nRequirement already satisfied: nbclassic&gt;=0.4.7 in /home/runner/.local/lib/python3.9/site-packages (from notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.4-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (1.0.0)\r\nRequirement already satisfied: ptyprocess&gt;=0.5 in /home/runner/.local/lib/python3.9/site-packages (from pexpect&gt;4.3-&gt;ipython&gt;=4.0.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (0.7.0)\r\nRequirement already satisfied: wcwidth in /home/runner/.local/lib/python3.9/site-packages (from prompt-toolkit!=3.0.37,&lt;3.1.0,&gt;=3.0.30-&gt;ipython&gt;=4.0.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (0.2.6)\r\nRequirement already satisfied: executing&gt;=1.2.0 in /home/runner/.local/lib/python3.9/site-packages (from stack-data-&gt;ipython&gt;=4.0.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (1.2.0)\r\nRequirement already satisfied: asttokens&gt;=2.1.0 in /home/runner/.local/lib/python3.9/site-packages (from stack-data-&gt;ipython&gt;=4.0.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (2.2.1)\r\nRequirement already satisfied: pure-eval in /home/runner/.local/lib/python3.9/site-packages (from stack-data-&gt;ipython&gt;=4.0.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (0.2.2)\r\nRequirement already satisfied: jupyter-server&gt;=1.8 in /home/runner/.local/lib/python3.9/site-packages (from nbclassic&gt;=0.4.7-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.4-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (2.6.0)\r\nRequirement already satisfied: notebook-shim&gt;=0.2.3 in /home/runner/.local/lib/python3.9/site-packages (from nbclassic&gt;=0.4.7-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.4-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (0.2.3)\r\nRequirement already satisfied: bleach in /home/runner/.local/lib/python3.9/site-packages (from nbconvert&gt;=5-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.4-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (6.0.0)\r\nRequirement already satisfied: defusedxml in /home/runner/.local/lib/python3.9/site-packages (from nbconvert&gt;=5-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.4-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (0.7.1)\r\nRequirement already satisfied: jupyterlab-pygments in /home/runner/.local/lib/python3.9/site-packages (from nbconvert&gt;=5-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.4-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (0.2.2)\r\nRequirement already satisfied: mistune&lt;3,&gt;=2.0.3 in /home/runner/.local/lib/python3.9/site-packages (from nbconvert&gt;=5-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.4-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (2.0.5)\r\nRequirement already satisfied: nbclient&gt;=0.5.0 in /home/runner/.local/lib/python3.9/site-packages (from nbconvert&gt;=5-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.4-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (0.8.0)\r\nRequirement already satisfied: pandocfilters&gt;=1.4.1 in /home/runner/.local/lib/python3.9/site-packages (from nbconvert&gt;=5-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.4-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (1.5.0)\r\nRequirement already satisfied: tinycss2 in /home/runner/.local/lib/python3.9/site-packages (from nbconvert&gt;=5-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.4-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (1.2.1)\r\nRequirement already satisfied: fastjsonschema in /home/runner/.local/lib/python3.9/site-packages (from nbformat-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.4-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (2.17.1)\r\nRequirement already satisfied: argon2-cffi-bindings in /home/runner/.local/lib/python3.9/site-packages (from argon2-cffi-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.4-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (21.2.0)\r\nRequirement already satisfied: jupyter-events&gt;=0.6.0 in /home/runner/.local/lib/python3.9/site-packages (from jupyter-server&gt;=1.8-&gt;nbclassic&gt;=0.4.7-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.4-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (0.6.3)\r\nRequirement already satisfied: jupyter-server-terminals in /home/runner/.local/lib/python3.9/site-packages (from jupyter-server&gt;=1.8-&gt;nbclassic&gt;=0.4.7-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.4-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (0.4.4)\r\nRequirement already satisfied: overrides in /home/runner/.local/lib/python3.9/site-packages (from jupyter-server&gt;=1.8-&gt;nbclassic&gt;=0.4.7-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.4-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (7.3.1)\r\nRequirement already satisfied: websocket-client in /home/runner/.local/lib/python3.9/site-packages (from jupyter-server&gt;=1.8-&gt;nbclassic&gt;=0.4.7-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.4-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (1.5.2)\r\nRequirement already satisfied: cffi&gt;=1.0.1 in /home/runner/.local/lib/python3.9/site-packages (from argon2-cffi-bindings-&gt;argon2-cffi-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.4-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (1.15.1)\r\nRequirement already satisfied: webencodings in /home/runner/.local/lib/python3.9/site-packages (from bleach-&gt;nbconvert&gt;=5-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.4-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (0.5.1)\r\nRequirement already satisfied: pycparser in /home/runner/.local/lib/python3.9/site-packages (from cffi&gt;=1.0.1-&gt;argon2-cffi-bindings-&gt;argon2-cffi-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.4-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (2.21)\r\nRequirement already satisfied: python-json-logger&gt;=2.0.4 in /home/runner/.local/lib/python3.9/site-packages (from jupyter-events&gt;=0.6.0-&gt;jupyter-server&gt;=1.8-&gt;nbclassic&gt;=0.4.7-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.4-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (2.0.7)\r\nRequirement already satisfied: pyyaml&gt;=5.3 in /home/runner/.local/lib/python3.9/site-packages (from jupyter-events&gt;=0.6.0-&gt;jupyter-server&gt;=1.8-&gt;nbclassic&gt;=0.4.7-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.4-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (6.0)\r\nRequirement already satisfied: rfc3339-validator in /home/runner/.local/lib/python3.9/site-packages (from jupyter-events&gt;=0.6.0-&gt;jupyter-server&gt;=1.8-&gt;nbclassic&gt;=0.4.7-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.4-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (0.1.4)\r\nRequirement already satisfied: rfc3986-validator&gt;=0.1.1 in /home/runner/.local/lib/python3.9/site-packages (from jupyter-events&gt;=0.6.0-&gt;jupyter-server&gt;=1.8-&gt;nbclassic&gt;=0.4.7-&gt;notebook&gt;=4.4.1-&gt;widgetsnbextension~=3.6.4-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geoproject) (0.1.1)\r\nRequirement already satisfied: fqdn in /home/runner/.local/lib/python3.9/site-packages (from jsonschema&gt;=3.0-&gt;altair&lt;5,&gt;=3.2.0-&gt;streamlit&gt;=1.13.0-&gt;streamlit-folium-&gt;geoproject) (1.5.1)\r\nRequirement already satisfied: isoduration in /home/runner/.local/lib/python3.9/site-packages (from jsonschema&gt;=3.0-&gt;altair&lt;5,&gt;=3.2.0-&gt;streamlit&gt;=1.13.0-&gt;streamlit-folium-&gt;geoproject) (20.11.0)\r\nRequirement already satisfied: jsonpointer&gt;1.13 in /home/runner/.local/lib/python3.9/site-packages (from jsonschema&gt;=3.0-&gt;altair&lt;5,&gt;=3.2.0-&gt;streamlit&gt;=1.13.0-&gt;streamlit-folium-&gt;geoproject) (2.3)\r\nRequirement already satisfied: uri-template in /home/runner/.local/lib/python3.9/site-packages (from jsonschema&gt;=3.0-&gt;altair&lt;5,&gt;=3.2.0-&gt;streamlit&gt;=1.13.0-&gt;streamlit-folium-&gt;geoproject) (1.2.0)\r\nRequirement already satisfied: webcolors&gt;=1.11 in /home/runner/.local/lib/python3.9/site-packages (from jsonschema&gt;=3.0-&gt;altair&lt;5,&gt;=3.2.0-&gt;streamlit&gt;=1.13.0-&gt;streamlit-folium-&gt;geoproject) (1.13)\r\nRequirement already satisfied: arrow&gt;=0.15.0 in /home/runner/.local/lib/python3.9/site-packages (from isoduration-&gt;jsonschema&gt;=3.0-&gt;altair&lt;5,&gt;=3.2.0-&gt;streamlit&gt;=1.13.0-&gt;streamlit-folium-&gt;geoproject) (1.2.3)\r\n</pre> In\u00a0[2]: Copied! <pre>import geoproject\nimport ipywidgets as widgets\nfrom ipyleaflet import WidgetControl\n</pre> import geoproject import ipywidgets as widgets from ipyleaflet import WidgetControl In\u00a0[3]: Copied! <pre>widget_width = \"250px\"\npadding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\ntoolbar_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Toolbar\",\n    icon=\"wrench\",\n    layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n)\n\nclose_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Close the tool\",\n    icon=\"times\",\n    button_style=\"primary\",\n    layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n)\n</pre> widget_width = \"250px\" padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left  toolbar_button = widgets.ToggleButton(     value=False,     tooltip=\"Toolbar\",     icon=\"wrench\",     layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding), )  close_button = widgets.ToggleButton(     value=False,     tooltip=\"Close the tool\",     icon=\"times\",     button_style=\"primary\",     layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding), ) In\u00a0[4]: Copied! <pre>toolbar = widgets.HBox([toolbar_button])\ntoolbar\n</pre> toolbar = widgets.HBox([toolbar_button]) toolbar In\u00a0[5]: Copied! <pre>def toolbar_click(change):\n    if change[\"new\"]:\n        toolbar.children = [toolbar_button, close_button]\n    else:\n        toolbar.children = [toolbar_button]\n        \ntoolbar_button.observe(toolbar_click, \"value\")\n</pre> def toolbar_click(change):     if change[\"new\"]:         toolbar.children = [toolbar_button, close_button]     else:         toolbar.children = [toolbar_button]          toolbar_button.observe(toolbar_click, \"value\") In\u00a0[6]: Copied! <pre>def close_click(change):\n    if change[\"new\"]:\n        toolbar_button.close()\n        close_button.close()\n        toolbar.close()\n        \nclose_button.observe(close_click, \"value\")\ntoolbar\n</pre> def close_click(change):     if change[\"new\"]:         toolbar_button.close()         close_button.close()         toolbar.close()          close_button.observe(close_click, \"value\") toolbar In\u00a0[7]: Copied! <pre>rows = 2\ncols = 2\ngrid = widgets.GridspecLayout(rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\"))\n</pre> rows = 2 cols = 2 grid = widgets.GridspecLayout(rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\")) <p>icons: https://fontawesome.com/v4.7.0/icons/</p> In\u00a0[8]: Copied! <pre>icons = [\"folder-open\", \"map\", \"info\", \"question\"]\n\nfor i in range(rows):\n    for j in range(cols):\n        grid[i, j] = widgets.Button(description=\"\", button_style=\"primary\", icon=icons[i*rows+j], \n                                    layout=widgets.Layout(width=\"28px\", padding=\"0px\"))\ngrid\n</pre> icons = [\"folder-open\", \"map\", \"info\", \"question\"]  for i in range(rows):     for j in range(cols):         grid[i, j] = widgets.Button(description=\"\", button_style=\"primary\", icon=icons[i*rows+j],                                      layout=widgets.Layout(width=\"28px\", padding=\"0px\")) grid In\u00a0[9]: Copied! <pre>toolbar = widgets.VBox([toolbar_button])\n</pre> toolbar = widgets.VBox([toolbar_button]) In\u00a0[10]: Copied! <pre>def toolbar_click(change):\n    if change[\"new\"]:\n        toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n    else:\n        toolbar.children = [toolbar_button]\n        \ntoolbar_button.observe(toolbar_click, \"value\")\ntoolbar\n</pre> def toolbar_click(change):     if change[\"new\"]:         toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]     else:         toolbar.children = [toolbar_button]          toolbar_button.observe(toolbar_click, \"value\") toolbar In\u00a0[11]: Copied! <pre>toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\")\n</pre> toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\") In\u00a0[12]: Copied! <pre>m = geoproject.Map()\nm.add_control(toolbar_ctrl)\nm\n</pre> m = geoproject.Map() m.add_control(toolbar_ctrl) m In\u00a0[13]: Copied! <pre>output = widgets.Output()\noutput_ctrl = WidgetControl(widget=output, position=\"bottomright\")\nm.add_control(output_ctrl)\n</pre> output = widgets.Output() output_ctrl = WidgetControl(widget=output, position=\"bottomright\") m.add_control(output_ctrl) In\u00a0[14]: Copied! <pre>basemap = widgets.Dropdown(\n    options=[\"OpenStreetmAP\", \"SATELLITE\", \"ROADMAP\"],\n    value=None,\n    description=\"basemap:\",\n    layout=widgets.Layout(width=widget_width, padding=padding),\n    style={\"description_width\": \"initial\"},\n)\nbasemap_control = WidgetControl(widget=basemap,position='topright')\n</pre> basemap = widgets.Dropdown(     options=[\"OpenStreetmAP\", \"SATELLITE\", \"ROADMAP\"],     value=None,     description=\"basemap:\",     layout=widgets.Layout(width=widget_width, padding=padding),     style={\"description_width\": \"initial\"}, ) basemap_control = WidgetControl(widget=basemap,position='topright') In\u00a0[15]: Copied! <pre>def change_basemap(change):\n    if change['new']:\n        m.add_basemap(basemap.value)\n</pre> def change_basemap(change):     if change['new']:         m.add_basemap(basemap.value)      In\u00a0[16]: Copied! <pre>basemap.observe(change_basemap,'value')\n</pre> basemap.observe(change_basemap,'value') In\u00a0[17]: Copied! <pre>def tool_click(b):    \n    with output:\n        output.clear_output()\n        print(f\"You clicked the {b.icon} button\")\n\n        if b.icon == \"map\":\n            m.add(basemap_control)\n</pre> def tool_click(b):         with output:         output.clear_output()         print(f\"You clicked the {b.icon} button\")          if b.icon == \"map\":             m.add(basemap_control) In\u00a0[18]: Copied! <pre>for i in range(rows):\n    for j in range(cols):\n        tool = grid[i, j]\n        tool.on_click(tool_click)\n</pre> for i in range(rows):     for j in range(cols):         tool = grid[i, j]         tool.on_click(tool_click) <p></p>"},{"location":"examples/toolbar/#creating-a-toolbar-button","title":"Creating a toolbar button\u00b6","text":""},{"location":"examples/toolbar/#adding-toolbar-event","title":"Adding toolbar event\u00b6","text":""},{"location":"examples/toolbar/#adding-toolbar-grid","title":"Adding toolbar grid\u00b6","text":""},{"location":"examples/toolbar/#adding-toolbar-to-ipyleaflet","title":"Adding toolbar to ipyleaflet\u00b6","text":""}]}